"""autogenerated by genpy from rgbd_vro/vroGoal.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class vroGoal(genpy.Message):
  _md5sum = "b29ec0416ed913f0510a3099a42591b7"
  _type = "rgbd_vro/vroGoal"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#goal definition
string vro_mode
string camera_name
string data_name
int32 data_index
int32 data_interval
int32 first_file_index
int32 second_file_index
string vf_detector_name
string vf_descriptor_name

"""
  __slots__ = ['vro_mode','camera_name','data_name','data_index','data_interval','first_file_index','second_file_index','vf_detector_name','vf_descriptor_name']
  _slot_types = ['string','string','string','int32','int32','int32','int32','string','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       vro_mode,camera_name,data_name,data_index,data_interval,first_file_index,second_file_index,vf_detector_name,vf_descriptor_name

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(vroGoal, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.vro_mode is None:
        self.vro_mode = ''
      if self.camera_name is None:
        self.camera_name = ''
      if self.data_name is None:
        self.data_name = ''
      if self.data_index is None:
        self.data_index = 0
      if self.data_interval is None:
        self.data_interval = 0
      if self.first_file_index is None:
        self.first_file_index = 0
      if self.second_file_index is None:
        self.second_file_index = 0
      if self.vf_detector_name is None:
        self.vf_detector_name = ''
      if self.vf_descriptor_name is None:
        self.vf_descriptor_name = ''
    else:
      self.vro_mode = ''
      self.camera_name = ''
      self.data_name = ''
      self.data_index = 0
      self.data_interval = 0
      self.first_file_index = 0
      self.second_file_index = 0
      self.vf_detector_name = ''
      self.vf_descriptor_name = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.vro_mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.camera_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.data_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_4i.pack(_x.data_index, _x.data_interval, _x.first_file_index, _x.second_file_index))
      _x = self.vf_detector_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.vf_descriptor_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vro_mode = str[start:end].decode('utf-8')
      else:
        self.vro_mode = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.camera_name = str[start:end].decode('utf-8')
      else:
        self.camera_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.data_name = str[start:end].decode('utf-8')
      else:
        self.data_name = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.data_index, _x.data_interval, _x.first_file_index, _x.second_file_index,) = _struct_4i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vf_detector_name = str[start:end].decode('utf-8')
      else:
        self.vf_detector_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vf_descriptor_name = str[start:end].decode('utf-8')
      else:
        self.vf_descriptor_name = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.vro_mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.camera_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.data_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_4i.pack(_x.data_index, _x.data_interval, _x.first_file_index, _x.second_file_index))
      _x = self.vf_detector_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.vf_descriptor_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vro_mode = str[start:end].decode('utf-8')
      else:
        self.vro_mode = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.camera_name = str[start:end].decode('utf-8')
      else:
        self.camera_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.data_name = str[start:end].decode('utf-8')
      else:
        self.data_name = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.data_index, _x.data_interval, _x.first_file_index, _x.second_file_index,) = _struct_4i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vf_detector_name = str[start:end].decode('utf-8')
      else:
        self.vf_detector_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vf_descriptor_name = str[start:end].decode('utf-8')
      else:
        self.vf_descriptor_name = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4i = struct.Struct("<4i")
